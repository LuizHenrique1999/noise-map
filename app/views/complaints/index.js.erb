function get_noise_type(token){
  switch(token){
    case 1:
      return "Disparo de alarmes"
    case 2:
      return "Música alta"
    case 3:
      return "Obras de construção civil"
    case 4:
      return  "Ruídos de vizinhos"
    case 5:
      return  "Tráfego de veículos"
  }
}

function get_highest_count(data){
  highest = 0
  for (let x of data){
    if (x.count > highest) { highest = x.count }
  }
  return highest
}

function get_ceiling(number){
  if(number > 10){
    result_module = number % 10
    
    if (result_module == 0){
      return number
    }
    
    ceiling = number + (10 - (number % 10))
    return ceiling
  }

  return 10
}

document.querySelector("#search_address").innerHTML +=
"<%= escape_javascript(render "layouts/search_address_form",
                              is_complaint: 0,
                              div_id: 'search_address_form',
                              field_id: 'search_address_field',
                              button_id: 'search_address_button' ) %>"

document.querySelector("#create_complaint").innerHTML += "<%= escape_javascript(render "layouts/create_complaint_form") %>"

let address_field = document.querySelector('#complaint_address_field')
const latitude_field = document.querySelector('#complaint_latitude')
const longitude_field = document.querySelector('#complaint_longitude')
const noise_type_field = document.querySelector('#complaint_noise_type_id')
const description_field = document.querySelector('#complaint_description')
let message = ""

const mapPin = L.icon({
    iconUrl: '<%= asset_path "map-pin-solid.svg" %>',
    iconSize:     [38, 95], // size of the icon
    iconAnchor:   [22, 94], // point of the icon which will correspond to markers location
    popupAnchor:  [-3, -76] // point from which the popup should open relative to the iconAnchor
});

const complaintIcon = L.icon({
    iconUrl: '<%= asset_path "map-marker-alt-solid.svg" %>',
    iconSize: [25, 41],
    iconAnchor: [12, 37],
    popupAnchor: [1, -34],
    tooltipAnchor: [16, -28]
});

const marker = L.marker([0,0], { draggable: 'true', icon: mapPin })
             .bindPopup('Clique e movimente o marcador para aumentar a precisão do endereço')
 
marker.on('dragend', function(event) {
  latitude_field.value = event.target._latlng.lat
  longitude_field.value = event.target._latlng.lng
});

const clusterLayer = L.markerClusterGroup();

const config = {
  "radius": 0.0016,
  "maxOpacity": .7,
  "scaleRadius": true,
  "useLocalExtrema": true,
};

const heatmapLayer = new HeatmapOverlay(config);
const heatmapData = { max: 8, data: [] };

let complaints = <%= raw  @all_complaints.to_json %>
for (let i = 0; i < complaints.length; i++) {
  clusterLayer.addLayer(L.marker([complaints[i].latitude, complaints[i].longitude], { icon: complaintIcon }).bindPopup(
    "<strong>Tipo</strong> <br>" + get_noise_type(complaints[i].noise_type_id) + "<br><br>"
    + "<strong>Descrição</strong> <br>" + complaints[i].description + "<br><br>"
    + "<strong>Criado em</strong> <br>" + complaints[i].created_at ))

  heatmapData.data.push({lat: complaints[i].latitude, lng: complaints[i].longitude, value: 1})
}

map.addLayer(clusterLayer)

document.querySelector('#reset_button').addEventListener('click', function(event){
  address_field.value = ""
  address_field.classList.remove('is-danger')
  latitude_field.value = ""
  longitude_field.value = ""
  noise_type_field.value = 1
  description_field.value = ""

  message = document.querySelector("#complaint_invalid_address_message")
  message ? message.parentNode.removeChild(message) : ""
  message = document.querySelector("#complaint_invalid_coordinates_message")
  message ? message.parentNode.removeChild(message) : ""
  document.querySelector("#complaint_description").classList.remove('is-danger')

  if(map.hasLayer(marker)){
    map.removeLayer(marker)
  }
  
  sidebar.close()
})

// Taken from here: https://www.d3-graph-gallery.com/graph/barplot_basic.html
var margin = {top: 30, right: 30, bottom: 90, left: 60},
    width = 800 - margin.left - margin.right,
    height = 600 - margin.top - margin.bottom;

var svg = d3.select("#charts")
  .append("svg")
    .attr("width", "100%")
    .attr("height", "100%")
    .attr("viewBox", "0 0 800 600")
  .append("g")
    .attr("transform",
          "translate(" + margin.left + "," + margin.top + ")");

let chart_data = <%= raw @noise_data.to_json %>

// X axis
var x = d3.scaleBand()
  .range([ 0, width ])
  .domain(chart_data.map(function(d) { return get_noise_type(d.id); }))
  .padding(0.2);

svg.append("g")
  .attr("transform", "translate(0," + height + ")")
  .call(d3.axisBottom(x))
  .selectAll("text")
    .classed("is-size-7", true);

max = get_highest_count(chart_data)

// Y axis
var y = d3.scaleLinear()
  .domain([0, get_ceiling(max)])
  .range([ height, 0]);
svg.append("g")
  .call(d3.axisLeft(y))

// Bars
svg.selectAll("bar")
  .data(chart_data)
  .enter()
  .append("rect")
    .attr("x", function(d) { return x(get_noise_type(d.id)); })
    .attr("y", function(d) { return y(d.count); })
    .attr("width", x.bandwidth())
    .attr("height", function(d) { return height - y(d.count); })
    .attr("fill", "#4474D9")